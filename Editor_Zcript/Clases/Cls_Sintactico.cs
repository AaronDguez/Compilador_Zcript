using System;
using System.Collections.Generic;
using System.Linq;

namespace Editor_Zcript
{
    class Cls_Sintactico
    {
        public static List<Tuple<int, string, int>> OrdenErrores = new List<Tuple<int, string, int>>();
        public static void Iniciar(List<Tuple<int, int>> resulLexico)
        {
            OrdenErrores.Clear();
            int tokenActual;
            int col, estado = 0;
            int[,] matriz = {
{ 6, 6, 1, 19, 410, 410, 410, 410, 410, 410, 410, 30, 30, 40, 41, 410, 410, 51, 51, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 609, 410, 410, 410, 410, 410, 410, 410 },
{ 414, 414, 414, 7, 414, 414, 414, 414, 414, 2, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414 },
{ 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417, 3, 417, 417, 417, 417, 417, 417, 417, 417, 417, 417 },
{ 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 4, 412, 412, 412, 412, 412, 412 },
{ 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 5, 413, 413, 413, 413, 413 },
{ 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 601, 411, 411, 411, 411, 411, 411, 411, 411 },
{ 414, 414, 414, 7, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414 },
{ 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 8, 15, 416, 416, 416, 416, 416, 416, 416, 603, 416, 416 },
{ 415, 415, 415, 9, 9, 9, 9, 14, 14, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 11, 415, 415, 415, 415, 415, 415 },
{ 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 10, 416, 416, 416, 416, 416, 416, 416, 416, 10, 10, 10, 10, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 423, 416, 416, 416, 603, 416, 416 },
{ 415, 415, 415, 9, 9, 9, 9, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 11, 415, 415, 415, 415, 415, 415 },
{ 415, 415, 415, 12, 12, 12, 12, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 11, 415, 415, 415, 603, 415, 415 },
{ 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 11, 413, 413, 413, 413, 413, 413, 413, 413, 11, 11, 11, 11, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 13, 413, 413, 413, 413, 413 },
{ 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 11, 416, 416, 416, 416, 416, 416, 416, 416, 11, 11, 11, 11, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 13, 416, 416, 603, 416, 416 },
{ 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 603, 416, 416 },
{ 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 16, 412, 412, 412, 412, 412, 412 },
{ 413, 413, 413, 17, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 18, 413, 413, 413, 413, 413 },
{ 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 18, 413, 16, 413, 413, 413 },
{ 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 602, 411, 411, 411, 411, 411, 411, 411, 411 },
{ 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 20, 410, 410, 410, 410, 27, 410, 410, 410, 410, 410, 410 },
{ 415, 415, 415, 21, 21, 21, 21, 26, 26, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 23, 415, 415, 415, 415, 415, 415 },
{ 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 22, 416, 416, 416, 416, 416, 416, 416, 416, 22, 22, 22, 22, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 423, 416, 416, 416, 604, 416, 416 },
{ 415, 415, 415, 21, 21, 21, 21, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 23, 415, 415, 415, 415, 415, 415 },
{ 415, 415, 415, 24, 24, 24, 24, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 23, 415, 415, 415, 415, 415, 415 },
{ 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 23, 413, 413, 413, 413, 413, 413, 413, 413, 23, 23, 23, 23, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 25, 413, 413, 413, 413, 413 },
{ 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 23, 416, 416, 416, 416, 416, 416, 416, 416, 23, 23, 23, 23, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 25, 416, 416, 604, 416, 416 },
{ 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 604, 416, 416 },
{ 415, 415, 415, 28, 28, 28, 28, 28, 28, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 27, 415, 415, 415, 415, 415, 415 },
{ 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 27, 27, 27, 27, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 29, 413, 27, 413, 413, 413 },
{ 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 27, 27, 27, 27, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 29, 416, 27, 605, 416, 416 },
{ 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 31, 412, 412, 412, 412, 412, 412 },
{ 415, 415, 415, 32, 32, 32, 32, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 31, 415, 415, 415, 415, 415, 415 },
{ 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 38, 418, 418, 418, 418, 418, 418, 418, 418, 36, 36, 36, 36, 33, 33, 33, 33, 33, 33, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418 },
{ 413, 413, 413, 34, 34, 34, 34, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413 },
{ 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 31, 31, 413, 413, 37, 37, 37, 37, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 31, 35, 413, 413, 413, 413, 413 },
{ 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 31, 31, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 606, 411, 411, 46, 411, 411, 411, 411, 411 },
{ 415, 415, 415, 32, 32, 32, 32, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415 },
{ 415, 415, 415, 34, 34, 34, 34, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415 },
{ 415, 415, 415, 39, 39, 39, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415 },
{ 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 33, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419 },
{ 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 607, 411, 411, 411, 411, 411, 411, 411, 411 },
{ 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 42, 412, 412, 412, 412, 412, 412 },
{ 413, 413, 413, 43, 43, 43, 43, 43, 43, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 42, 413, 413, 413, 413, 413, 413 },
{ 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 49, 418, 418, 418, 418, 418, 418, 418, 418, 47, 47, 47, 47, 44, 44, 44, 44, 44, 44, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418 },
{ 415, 415, 415, 45, 45, 45, 45, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415,  415 },
{ 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 42, 42, 413, 413, 48, 48, 48, 48, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 42, 46, 413, 413, 413, 413, 413 },
{ 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 42, 42, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 608, 42, 46, 411, 411, 411, 411, 411 },
{ 415, 415, 415, 43, 43, 43, 43, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415 },
{ 415, 415, 415, 45, 45, 45, 45, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415 },
{ 415, 415, 415, 50, 50, 50, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415 },
{ 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 44, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419 },
{ 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 52, 412, 412, 412, 412, 412, 412 },
{ 415, 415, 415, 53, 53, 53, 53, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 52, 415, 415, 415, 415, 415, 415 },
{ 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 52, 413, 413, 413, 413, 413, 413, 413, 413, 52, 52, 52, 52, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 54, 413, 413, 413, 413, 413 },
{ 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 52, 416, 416, 416, 416, 416, 416, 416, 416, 52, 52, 52, 52, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 54, 416, 416, 610, 416, 416 },
{ 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 412, 56, 412, 412, 412, 412, 412, 412 },
{ 415, 415, 415, 57, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415 },
{ 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 58, 413, 413, 413, 413, 413 },
{ 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 611, 416, 416 },
            };
            int[] Finales = { 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611 };
            Dictionary<int, string> Error = new Dictionary<int, string>
            {
                { 410, "Unknown Error" },
                { 411, "{ Expected" },
                { 412, "( Expected" },
                { 413, ") Expected" },
                { 414, "Name Expected" },
                { 415, "Value(s) Expected" },
                { 416, "; Expected" },
                { 417, "=> Expected" },
                { 418, "Condition Expected" },
                { 419, "== expected" },
                { 420, "Too much }" },
                { 421, "Too much )" },
                { 422, "There's already a MAIN method" },
                { 423, "Can't use a function as value" },
            };
            int[] EstadosError = Error.Keys.ToArray();
            Stack<int> llaves = new Stack<int>();
            Stack<int> parentesis = new Stack<int>();
            Stack<int> estructura = new Stack<int>();

            for (int i = 0; i < resulLexico.Count; i++)
            {
                tokenActual = resulLexico[i].Item1;
                switch (tokenActual)
                {
                    case 200://var
                        col = 0;
                        break;
                    case 201://let
                        col = 1;
                        break;
                    case 202://const
                        col = 2;
                        break;
                    case 100://variable
                        col = 3;
                        break;
                    case 101://Entero
                        col = 4;
                        break;
                    case 102://Decimal
                        col = 5;
                        break;
                    case 126://Cadena
                        col = 6;
                        break;
                    case 214://true
                        col = 7;
                        break;
                    case 215://false
                        col = 8;
                        break;
                    case 208://main
                        col = 9;
                        estructura.Push(tokenActual);
                        break;
                    case 216://mod
                        col = 10;
                        break;
                    case 203://if
                        col = 11;
                        estructura.Push(tokenActual);
                        break;
                    case 205://elif
                        col = 12;
                        estructura.Push(tokenActual);
                        break;
                    case 204://else
                        col = 13;
                        estructura.Push(tokenActual);
                        break;
                    case 206://while
                        col = 14;
                        estructura.Push(tokenActual);
                        break;
                    case 212://and
                        col = 15;
                        break;
                    case 213://or
                        col = 16;
                        break;
                    case 210://write
                        col = 17;
                        break;
                    case 211://read
                        col = 18;
                        break;
                    case 103://+
                        col = 19;
                        break;
                    case 104://-
                        col = 20;
                        break;
                    case 105://*
                        col = 21;
                        break;
                    case 106:// /
                        col = 22;
                        break;
                    case 107://>
                        col = 23;
                        break;
                    case 108://>=
                        col = 24;
                        break;
                    case 109://<
                        col = 25;
                        break;
                    case 110://<=
                        col = 26;
                        break;
                    case 111://==
                        col = 27;
                        break;
                    case 115://!=
                        col = 28;
                        break;
                    case 112://=
                        col = 29;
                        break;
                    case 113://=>
                        col = 30;
                        break;
                    case 116://$
                        col = 31;
                        break;
                    case 118://{
                        col = 32;
                        llaves.Push(tokenActual);
                        break;
                    case 119://}
                        col = 33;
                        if (llaves.Count == 0) //Si la pila esta vacia da error
                        {
                            OrdenErrores.Add(new Tuple<int, string, int>(420, Error[420], resulLexico[i].Item2));
                            int linea = resulLexico[i].Item2;
                            for (int j = i; j < resulLexico.Count; j++)
                            {
                                if(linea >= resulLexico[j].Item2)
                                {
                                    i = j;
                                    break;
                                }
                            }
                            estado = 0;
                        }
                        else
                        {
                            if (estructura.Count == 0)
                            {
                                OrdenErrores.Add(new Tuple<int, string, int>(420, Error[420], resulLexico[i].Item2));
                                int linea = resulLexico[i].Item2;
                                for (int j = i; j < resulLexico.Count; j++)
                                {
                                    if (linea >= resulLexico[j].Item2)
                                    {
                                        i = j;
                                        break;
                                    }
                                }
                                estado = 0;
                            }
                            else
                                estructura.Pop();
                            llaves.Pop();
                        }
                        break;
                    case 120://(
                        col = 34;
                        parentesis.Push(tokenActual);
                        break;
                    case 121://)
                        col = 35;
                        if (parentesis.Count == 0)
                        {
                            OrdenErrores.Add(new Tuple<int, string, int>(421, Error[421], resulLexico[i].Item2));
                            int linea = resulLexico[i].Item2;
                            for (int j = i; j < resulLexico.Count; j++)
                            {
                                if (linea >= resulLexico[j].Item2)
                                {
                                    i = j - 1;
                                    break;
                                }
                            }
                            estado = 0;
                        }
                        else
                            parentesis.Pop(); // Eliminar ( de la pila
                        break;
                    case 122://.
                        col = 36;
                        break;
                    case 123://,
                        col = 37;
                        break;
                    case 124://;
                        col = 38;
                        break;
                    default://O.C.
                        col = 39;
                        break;
                }

                //Condicion que verifica si el estado no es mayor a la cantidad de filas y columnas de la matriz
                if (estado >= 0 && estado < matriz.GetLength(0) && col >= 0 && col < matriz.GetLength(1))
                    estado = matriz[estado, col];

                if (Finales.Contains(estado))
                {
                    if (estado == 602)
                        estructura.Push(tokenActual);
                    estado = 0;
                }
                //Si el estado es un estado de error o si ya no hay token siguiente y el estado no es uno de aceptacion
                else if (EstadosError.Contains(estado))
                {
                    OrdenErrores.Add(new Tuple<int, string, int>(estado, Error[estado], resulLexico[i].Item2));
                    //int linea = resulLexico[i].Item2;
                    //for (int j = i; j < resulLexico.Count; j++)
                    //{
                    //    if (linea >= resulLexico[j].Item2)
                    //    {
                    //        i = j - 1;
                    //        break;
                    //    }
                    //}
                    estado = 0;
                }
            }
        }
    }
}
